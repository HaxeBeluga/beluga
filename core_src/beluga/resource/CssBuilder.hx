// Copyright 2014 The Beluga Project Developers. See the LICENCE.md
// file at the top-level directory of this distribution and at
// http://haxebeluga.github.io/licence.html.
//
// Licensed under the MIT License.
// This file may not be copied, modified, or distributed
// except according to those terms.

package beluga.resource;

import sys.io.File;
import haxe.macro.Expr;
import haxe.macro.Compiler;
import sys.FileSystem;
import beluga.tool.Html;
import haxe.macro.Context;
#if macro
import tink.MacroApi.ExprTools;
#end

using Lambda;
using StringTools;
using beluga.tool.ExprTool;

class CssBuilder
{

    private static var cssList : Array<String> = {
        ConfigLoader.forceBuild();
        [
            "//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css",
            "//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css",
            ConfigLoader.getBaseUrl() + "/beluga/css/beluga.css"
        ];
    };
    
    //List all css file or folder to build to CSS target
    public static var pathList = new Array<{path:String, pos : Position}>();

    macro public static function importCss(path : String) : Array<Field>{
        CssBuilder.pathList.push( {
            path: path,
            pos: Context.currentPos()
        });
        return Context.getBuildFields();
    }

    macro public static function readCssMetadata() : Array<Field> {
        var metaList = Context.getLocalClass().get().meta;
        if (metaList.has(":Css")) {
            var cssMetaList = metaList.get().filter(function(entry : MetadataEntry) {
                return entry.name == ":Css";
            });
            for (meta in cssMetaList) {
                if (meta.params.length == 1) {
                    var str : String = meta.params[0].getCString();
                    if (str == null) {
                        Context.error("@:Css first parameter must be a String", meta.pos);
                    } else {
                        pathList.push( {
                            path: str,
                            pos: meta.pos
                        });
                    }
                } else {
                    Context.error("@:Css take only on parameter", meta.pos);
                }
            }
        }
        return Context.getBuildFields();
    }

    macro public static function compile() : Expr {
        ConfigLoader.forceBuild();
        var realOutput = Compiler.getOutput();
        if (realOutput.endsWith(".n")) { //Trick for neko output
            realOutput = realOutput.substr(0, realOutput.lastIndexOf("/"));
        }
        Sys.println("Generating " + realOutput + "/beluga/css/beluga.css");
        FileSystem.createDirectory(realOutput + "/beluga/css");
        var writer = File.write(realOutput + "/beluga/css/beluga.css");
        writer.writeString("/* File generated by Beluga Framwork */\n");
        for (path in pathList) {
            var fullPath = Context.resolvePath(path.path);
            if (FileSystem.exists(fullPath)) {
                if (FileSystem.isDirectory(fullPath)) {
                    concatDir(fullPath, writer);
                } else {
                    concatFile(fullPath, writer);
                }
            } else {
                Context.error("File or folder " + fullPath + " does not exist", path.pos);
            }
        }
        writer.close();
        return macro null;
    }

    private static function concatDir(dir : String, writer) {
        for (file in FileSystem.readDirectory(dir)) {
            if (file.endsWith(".css")) {
                writer.writeString("/*\n");
                writer.writeString("** " + dir + "/" + file +"\n");
                writer.writeString("*/\n");
                writer.writeString(File.getContent(dir + "/" + file));
            }
        }
    }
    private static function concatFile(file : String, writer) {
        if (file.endsWith(".css")) {
            writer.writeString("/*\n");
            writer.writeString("**" + file +"\n");
            writer.writeString("*/\n");
            writer.writeString(File.getContent(file));
        }
    }
    
    /*
     * Return a string containing the HTML code to include all css file specified in Css.cssList like:
     * <link rel="stylesheet" href="css1"/>
     * <link rel="stylesheet" href="css2"/>
     * etc...
     */
    public static function getHtmlInclude() : String {
        var html = "";
        for (css in CssBuilder.cssList) {
            html += Html.tag("link", ["rel" => "stylesheet", "href" => css]);
        }
        return html;
    }
}